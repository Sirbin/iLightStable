<?xml version="1.0" encoding="UTF-8"?>
<root>
    <doclet-version-NOT-library-version>1.00</doclet-version-NOT-library-version>
    <class>
        <name>anywheresoftware.b4a.objects.Serial</name>
        <shortname>Serial</shortname>
        <comment>The Serial library allows you to connect with other Bluetooth devices using RFCOMM, also named virtual serial port.
&lt;b&gt;This library requires Android 2.0 (API level 5) or above&lt;/b&gt;.
The Serial object should be declared as a process global object.
After initializing the object you can connect to other devices by calling Connect with the target device MAC address.
This can be done by first getting the paired devices map. This map contains the friendly name and address of each paired device.
To allow other devices to connect to your device you should call Listen. When a connection is established the Connected event will be raised.
There is no problem with both listening to connections and trying to connect to a different device (this allows you to use the same application on two devices without defining a server and client).
A Serial object can handle a single connection. If a new connection is established, it will replace the previous one.
See this &lt;link&gt;tutorial|http://www.basic4ppc.com/forum/basic4android-getting-started-tutorials/6908-android-serial-tutorial.html&lt;/link&gt; for more information.</comment>
        <owner>process</owner>
        <event>Connected (Success As Boolean)</event>
        <permission>android.permission.BLUETOOTH</permission>
        <method>
            <name>Listen</name>
            <comment>Starts listening for incoming connections using the default UUID.
The Connected event will be raised when the connection is established.
Nothing happens if the device already listens for connections.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>Connect</name>
            <comment>Tries to connect to a device with the given address. The connection is done in the background.
The Connected event will be raised when the connection is ready (or fails).
The UUID used for the connection is the default UUID: 00001101-0000-1000-8000-00805F9B34FB.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>MacAddress</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>GetPairedDevices</name>
            <comment>Returns a map with the paired devices friendly names as keys and addresses as values.
The following code shows a list of available devices and allows the user to connect to one:&lt;code&gt;
Dim PairedDevices As Map
PairedDevices = Serial1.GetPairedDevices
Dim l As List
l.Initialize
For i = 0 To PairedDevices.Size - 1
	l.Add(PairedDevices.GetKeyAt(i))
Next
Dim res As Int
res = InputList(l, "Choose device", -1) 'show list with paired devices
If res &lt;&gt; DialogResponse.CANCEL Then
	Serial1.Connect(PairedDevices.Get(l.Get(res))) 'convert the name to mac address and connect
End If&lt;/code&gt;</comment>
            <returntype>anywheresoftware.b4a.objects.collections.Map</returntype>
        </method>
        <method>
            <name>Initialize</name>
            <comment>Initialized the object. You may want to call IsEnabled before trying to work with the object.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>EventName</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>StopListening</name>
            <comment>Stops listening for incoming connections.
This will not disconnect any active connection.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>Connect2</name>
            <comment>Tries to connect to a device with the given address and UUID. The connection is done in the background.
The Connected event will be raised when the connection is ready (or fails).</comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>MacAddress</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>UUID</name>
                <type>java.lang.String</type>
            </parameter>
        </method>
        <method>
            <name>Connect3</name>
            <comment></comment>
            <returntype>void</returntype>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
            <parameter>
                <name>MacAddress</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>Port</name>
                <type>int</type>
            </parameter>
        </method>
        <method>
            <name>Listen2</name>
            <comment>Starts listening for incoming connections.
The Connected event will be raised when the connection is established.
Nothing happens if the device already listens for connections.
Name - An arbitrary string that will be used for internal registration.
UUID - The UUID defined for this record.</comment>
            <returntype>void</returntype>
            <parameter>
                <name>Name</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>UUID</name>
                <type>java.lang.String</type>
            </parameter>
            <parameter>
                <name>ba</name>
                <type>anywheresoftware.b4a.BA</type>
            </parameter>
        </method>
        <method>
            <name>Disconnect</name>
            <comment>Disconnects the connection (if such exists) and stops listening for new connections.</comment>
            <returntype>void</returntype>
        </method>
        <method>
            <name>IsEnabled</name>
            <comment>Tests whether the Bluetooth is enabled.</comment>
            <returntype>boolean</returntype>
        </method>
        <property>
            <name>Name</name>
            <returntype>java.lang.String</returntype>
            <comment>Returns the current device friendly name.</comment>
        </property>
        <property>
            <name>Address</name>
            <returntype>java.lang.String</returntype>
            <comment>Returns the current device MAC address.</comment>
        </property>
        <property>
            <name>InputStream</name>
            <returntype>java.io.InputStream</returntype>
            <comment>Returns the InputStream that is used to read data from the other device.
Should be called after a connection is established.</comment>
        </property>
        <property>
            <name>OutputStream</name>
            <returntype>java.io.OutputStream</returntype>
            <comment>Returns the OutputStream that is used to write data to the other device.
Should be called after a connection is established.</comment>
        </property>
    </class>
    <version>1.01</version>
</root>
